{"version":3,"sources":["services/getTemperature.js","services/transformWeather.js","components/header/index.js","components/headerquarter/index.js","components/headquarters/index.js","components/city/index.js","components/cities/index.js","components/headquarter-suggested/index.js","components/nagivation/index.js","services/getMainHeadquarter.js","services/getFavoritePlaces.js","services/getPlacesToVisit.js","services/getHeadquarterSuggested.js","components/carousel-slide/index.js","services/transformForecastExtended.js","components/forecast-extended/index.js","containers/dashboard/index.js","router/index.js","serviceWorker.js","index.js"],"names":["getTemperature","kelvin","Number","convert","from","to","toFixed","transformHeadquarterData","data","main","humidity","temp","speed","wind","icon","weather","length","temperature","country","sys","day","moment","date","format","description","image","name","url","uri","HeaderComponent","headquarter","mainHeadquarter","weatherData","bgStyle","backgroundImage","id","className","style","mainWrapperRendered","HeadquarterComponent","headequarterData","src","alt","FavoritePlacesComponent","headquarters","map","headequarter","weatherHeadquarters","key","CityComponent","cityData","href","rel","target","CitiesComponent","cities","city","weatherCity","HeadquarterSuggestedComponent","weatherSuggested","renderHeadquarterSuggested","NavigationComponent","getMainHeadquarter","_","filter","main_headquarter","getFavoritePlaces","getPlaceToVisit","getHeadquarterSuggested","otherHeadquarters","getOtherHeadquarter","minBy","SlideCarouselComponent","forecastData","data-target","transformForecastExtended","ForecastExtendedComponent","forecastExtended","useEffect","a","carousel","document","querySelector","card","leftButton","rightButton","carouselWidth","offsetWidth","cardStyle","currentStyle","window","getComputedStyle","cardMarginRight","marginRight","match","cardCount","querySelectorAll","offset","maxX","addEventListener","transform","setCarouselButton","data-action","forecast","index","DashboardContainer","useState","setHeadquarters","setForecastExtended","setCities","fetch","response","json","places","console","error","list","result","getAllHeadquartes","getForecastExtended","getAllCities","showHeaderComponent","favoriteHeadquarter","showFavoritePlaces","headquarterSuggested","showHeadquarterSuggested","citiesFiltered","showVisitPlaces","RouterApp","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.66d546aa.chunk.js","sourcesContent":["import convert from \"convert-units\";\n\nconst getTemperature = (kelvin) => {\n  return Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(0));\n};\n\nexport default getTemperature;\n","import getTemperature from './getTemperature';\n\nimport * as moment from 'moment';\n\nconst transformHeadquarterData = (data) => {\n  const { humidity, temp } = data.main,\n        { speed }          = data.wind,\n        status             = data.weather[data.weather.length - 1],\n        icon               = status.icon,\n        temperature        = getTemperature(temp),\n        location           = data.sys,\n        country            = location.country,\n        day                = moment(data.date).format('dddd'),\n        description        = data.description;\n\n  const weather = {\n    humidity: `${humidity} %`,\n    icon: `wi wi-${icon}`,\n    temperature: `${temperature}° C`,\n    wind: `${speed} m/s`,\n    day,\n    image: data.image,\n    name: data.name,\n    country,\n    url: data.uri,\n    description\n  };\n\n  return weather;\n};\n\nexport default transformHeadquarterData;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport transformHeadquarterData from \"../../services/transformWeather\";\nimport \"../../styles/global.scss\";\n\nimport \"./style.scss\";\n\nconst HeaderComponent = ({ headquarter }) => {\n  const mainHeadquarter = headquarter && headquarter[headquarter.length - 1];\n\n  const mainWrapperRendered = () => {\n    const weatherData = transformHeadquarterData(mainHeadquarter);\n\n    const bgStyle = {\n      backgroundImage: `url(${weatherData.image})`,\n    };\n\n    return (\n      <article id=\"widget-header\" className=\"main-article radious-30\" style={bgStyle}>\n        <div className=\"wrapper\">\n          <div className=\"headquarter-info\">\n            <div className=\"headquarter-info-name tag purple radious-40\">\n              <h4 className=\"widget-headquarter color--white\">\n                <i className=\"fa fa-map-marker\"></i> {weatherData.name}\n              </h4>\n            </div>\n            <div className=\"headquarter-icon\">\n              <i className={weatherData.icon + ' widget-icon'}></i>\n            </div>\n          </div>\n          <div className=\"headquarter-caption\">\n            <div className=\"headquarter-caption-status\">\n              <div className=\"widget-temperature temperature\">\n                <h2 className=\"color--white\">{weatherData.temperature}</h2>\n              </div>\n              <div className=\"extra\">\n                <span className=\"item-circle pink\"></span>\n                <h6 className=\"widget-humidity color--white\">\n                  {weatherData.humidity}\n                </h6>\n                <span className=\"item-circle blue\"></span>\n                <h6 className=\"widget-wind color--white\">{weatherData.wind}</h6>\n              </div>\n            </div>\n            <div className=\"headquarter-caption-message\">\n              <h1 className=\"color--white\">\n                Good morning,\n                <br />\n                <span>Condor!</span>\n              </h1>\n            </div>\n          </div>\n        </div>\n      </article>\n    );\n  };\n\n  return <>{mainWrapperRendered()}</>;\n};\n\nHeaderComponent.propTypes = {\n  headquarter: PropTypes.array.isRequired,\n};\n\nexport default HeaderComponent;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport \"./style.scss\";\n\nconst HeadquarterComponent = ({ headequarterData }) => {\n  return (\n    <article className=\"widget-card article card radious-30\">\n      <div className=\"article-media\">\n        <img src={headequarterData.image} alt={headequarterData.name} className=\"radious-50\" />\n      </div>\n      <div className=\"article-content\">\n        <div className=\"article-content-place\">\n          <div className=\"article-name\">\n            <h4 className=\"widget-headquarter-name color--purple\">\n              <i className=\"fa fa-map-marker\"></i> {headequarterData.name} -{\" \"}\n              {headequarterData.country}\n            </h4>\n            <p className=\"color--gray\">{headequarterData.description}</p>\n          </div>\n          <div className=\"article-icon\">\n            <i className={headequarterData.icon + ' widget-icon'}></i>\n          </div>\n        </div>\n        <div className=\"article-content-weather\">\n          <div className=\"extra\">\n            <span className=\"item-circle orange\"></span>\n            <h6 className=\"widget-temperature color--dark\">{headequarterData.temperature}</h6>\n            <span className=\"item-circle pink\"></span>\n            <h6 className=\"widget-humidity color--dark\">{headequarterData.humidity}</h6>\n            <span className=\"item-circle blue\"></span>\n            <h6 className=\"widget-wind color--dark\">{headequarterData.wind}</h6>\n          </div>\n        </div>\n      </div>\n    </article>\n  );\n};\n\nHeadquarterComponent.propTypes = {\n  headequarterData: PropTypes.object.isRequired\n}\n\nexport default HeadquarterComponent;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport HeadquarterComponent from \"../headerquarter\";\nimport transformHeadquarterData from \"../../services/transformWeather\";\n\nimport \"./style.scss\";\n\nconst FavoritePlacesComponent = ({ headquarters }) => {\n  const renderFavoritePlaces = () => {\n    return (\n      <>\n        {headquarters.map((headequarter) => {\n          const weatherHeadquarters = transformHeadquarterData(headequarter);\n          return (\n            <div className=\"favorite-content-column\" key={headequarter.id}>\n              <HeadquarterComponent headequarterData={weatherHeadquarters} />\n            </div>\n          );\n        })}\n      </>\n    );\n  };\n  return (\n    <section id=\"widget-favorite\" className=\"favorite\">\n      <div className=\"heading\">\n        <h2 className=\"title color--purple\">Our Favorite <span>Places</span></h2>\n      </div>\n      <div className=\"favorite-content\">\n        {renderFavoritePlaces()}\n      </div>\n    </section>\n  );\n};\n\nFavoritePlacesComponent.propTypes = {\n  headquarters: PropTypes.array.isRequired\n}\n\nexport default FavoritePlacesComponent;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport \"./style.scss\";\n\nconst CityComponent = ({ cityData }) => {\n  const bgStyle = {\n    backgroundImage: `url(${cityData.image})`\n  };\n\n  return (\n    <article className=\"widget-card city card radious-30\" style={bgStyle}>\n      <div className=\"city-content\">\n        <div className=\"city-content-heading\">\n        <h4 className=\"widget-city-name color--white\">{cityData.name}</h4>\n        </div>\n        <a href={cityData.url}rel=\"noopener noreferrer\" className=\"color--white radious-30\" target='_blank'>\n          VISIT TO PLACE\n        </a>\n      </div>\n    </article>\n  );\n};\n\nCityComponent.propTypes = {\n  cityData: PropTypes.object.isRequired\n}\n\nexport default CityComponent;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport CityComponent from \"../city\";\nimport transformHeadquarterData from \"../../services/transformWeather\";\n\nimport \"./style.scss\";\n\nconst CitiesComponent = ({ cities }) => {\n  const renderCities = () => {\n    return (\n      <>\n        {cities.map((city) => {\n          const weatherCity = transformHeadquarterData(city);\n          return (\n            <div className=\"cities-content-column\" key={city.id}>\n              <CityComponent cityData={weatherCity} />\n            </div>\n          );\n        })}\n      </>\n    );\n  };\n  return (\n    <section id=\"widget-cities\" className=\"cities\">\n      <div className=\"heading\">\n        <h2 className=\"title color--purple\">\n          PLACES TO <span>VISIT</span>\n        </h2>\n      </div>\n      <div className=\"cities-content\">{renderCities()}</div>\n    </section>\n  );\n};\n\nCitiesComponent.propTypes = {\n  cities: PropTypes.array.isRequired\n}\n\nexport default CitiesComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport transformHeadquarterData from \"../../services/transformWeather\";\n\nimport \"./style.scss\";\n\nconst HeadquarterSuggestedComponent = ({ headquarter }) => {\n  const renderHeadquarterSuggested = () => {\n    const weatherSuggested = transformHeadquarterData(headquarter);\n    return (\n      <article className=\"headquarter radious-30\">\n        <div className=\"headquarter-content\">\n          <div className=\"headquarter-content-row\">\n            <div className=\"row-title\">\n              <h4 className=\"widget-headquarter color--white\">\n                <i className=\"fa fa-map-marker\"></i> {weatherSuggested.name} -{\" \"}\n                {weatherSuggested.country}\n              </h4>\n            </div>\n            <div className=\"row-icon\">\n              <i className={weatherSuggested.icon + ' widget-icon'}></i>\n            </div>\n          </div>\n          <div className=\"headquarter-content-row\">\n            <div className=\"row-temp\">\n              <h4 className=\"widget-temperature color--white\">\n                {weatherSuggested.temperature}\n              </h4>\n            </div>\n          </div>\n          <div className=\"headquarter-content-row\">\n            <div className=\"extra\">\n              <span className=\"item-circle pink\"></span>\n              <h6 className=\"widget-humidity color--white\">\n                {weatherSuggested.humidity}\n              </h6>\n              <span className=\"item-circle blue\"></span>\n              <h6 className=\"widget-wind color--white\">\n                {weatherSuggested.wind}\n              </h6>\n            </div>\n            <div className=\"day\">\n              <h4 className=\"widget-day color--white\">{weatherSuggested.day}</h4>\n            </div>\n          </div>\n        </div>\n      </article>\n    );\n  };\n  return (\n    <section id=\"widget-suggest\" className=\"suggest\">\n      <div className=\"heading\">\n        <h2 className=\"title color--purple\">\n          Headquarter <span>suggested</span>\n        </h2>\n      </div>\n      <div className=\"suggest-content\">{renderHeadquarterSuggested()}</div>\n    </section>\n  );\n};\n\nHeadquarterSuggestedComponent.propTypes = {\n  headquarter: PropTypes.object.isRequired,\n};\n\nexport default HeadquarterSuggestedComponent;\n","import React from \"react\";\n\nimport \"./style.scss\";\n\nconst NavigationComponent = () => {\n  return (\n    <nav className=\"navigation\">\n      <div className=\"container\">\n        <h3 className=\"color--white\">Weather App</h3>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavigationComponent;\n","import _ from \"lodash\";\n\nconst getMainHeadquarter = (headquarters) => {\n  return _.filter(headquarters, (headquarter) => {\n    return headquarter.main_headquarter;\n  });\n};\n\nexport default getMainHeadquarter;\n","import _ from \"lodash\";\n\nconst getFavoritePlaces = (headquarters) => {\n  return _.filter(headquarters, (headquarter) => {\n    return !headquarter.main_headquarter;\n  });\n};\n\nexport default getFavoritePlaces;\n","import _ from \"lodash\";\n\nimport getTemperature from './getTemperature';\n\nconst getPlaceToVisit = (cities) => {\n    return _.filter(cities, (city) => {\n\n    const { temp } = city.main,\n                 temperature = getTemperature(temp);\n\n    if (temperature > 24 && temperature < 29) return city;\n  });\n};\n\nexport default getPlaceToVisit;\n","import _ from \"lodash\";\n\nconst getOtherHeadquarter = (headquarters) => {\n  return _.filter(headquarters, (headquarter) => {\n    return !headquarter.main_headquarter;\n  });\n};\n\nconst getHeadquarterSuggested = (headquarters) => {\n  const otherHeadquarters = getOtherHeadquarter(headquarters);\n\n  return _.minBy(otherHeadquarters, (headquarter) => {\n    return headquarter.main.humidity;\n  });\n};\n\nexport default getHeadquarterSuggested;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SlideCarouselComponent = ({ forecastData }) => {\n  return (\n    <li className=\"widget-carousel-item item-slide\" data-target=\"card\">\n      <h3 className=\"widget-day color--dark\">{forecastData.day}</h3>\n      <h2 className=\"widget-temperature color--dark\">\n        {forecastData.temperature}\n      </h2>\n      <div className=\"extra\">\n        <span className=\"item-circle pink\"></span>\n        <h6 className=\"widget-humidity color--dark\">{forecastData.humidity}</h6>\n        <span className=\"item-circle blue\"></span>\n        <h6 className=\"widget-wind color--dark\">{forecastData.wind}</h6>\n      </div>\n    </li>\n  );\n};\n\nSlideCarouselComponent.propTypes = {\n  forecastData: PropTypes.object.isRequired,\n};\n\nexport default SlideCarouselComponent;\n","import * as moment from 'moment';\n\nimport getTemperature from './getTemperature';\n\nconst transformForecastExtended = (data) => {\n  const { humidity, temp } = data.main,\n        { speed }          = data.wind,\n        status             = data.weather[data.weather.length - 1],\n        icon               = status.icon,\n        temperature        = getTemperature(temp),\n        day                = moment(data.date).format('dddd');\n\n  const weather = {\n    humidity: `${humidity} %`,\n    icon: `wi wi-${icon}`,\n    temperature: `${temperature}° C`,\n    wind: `${speed} m/s`,\n    day\n  };\n\n  return weather;\n};\n\nexport default transformForecastExtended;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SlideCarouselComponent from \"../carousel-slide\";\nimport transformForecastExtended from \"../../services/transformForecastExtended\";\nimport \"./style.scss\";\n\nconst ForecastExtendedComponent = ({ forecastExtended }) => {\n  useEffect(() => {\n    async function setCarouselButton() {\n      const carousel = document.querySelector(\"[data-target='carousel']\"),\n        card = carousel.querySelector(\"[data-target='card']\"),\n        leftButton = document.querySelector(\"[data-action='slideLeft']\"),\n        rightButton = document.querySelector(\"[data-action='slideRight']\"),\n        carouselWidth = carousel.offsetWidth,\n        cardStyle = card.currentStyle || window.getComputedStyle(card),\n        cardMarginRight = Number(cardStyle.marginRight.match(/\\d+/g)[0]),\n        cardCount = carousel.querySelectorAll(\"[data-target='card']\").length;\n\n      let offset = 0;\n\n      const maxX = -(\n        (cardCount / 3) * carouselWidth +\n        cardMarginRight * (cardCount / 3) -\n        carouselWidth -\n        cardMarginRight\n      );\n\n      leftButton.addEventListener(\"click\", function () {\n        if (offset !== 0) {\n          offset += carouselWidth + cardMarginRight;\n          carousel.style.transform = `translateX(${offset}px)`;\n        }\n      });\n\n      rightButton.addEventListener(\"click\", function () {\n        if (offset !== maxX) {\n          offset -= carouselWidth + cardMarginRight;\n          carousel.style.transform = `translateX(${offset}px)`;\n        }\n      });\n    }\n\n    setCarouselButton();\n  }, []);\n\n  const showForecastExtended = () => {\n    return (\n      <ul className=\"carousel-slider-content\" data-target=\"carousel\">\n        {forecastExtended.map((forecast, index) => {\n          const day = transformForecastExtended(forecast);\n          return <SlideCarouselComponent forecastData={day} key={index} />;\n        })}\n      </ul>\n    );\n  };\n\n  return (\n    <article id=\"widget-carousel\" className=\"forecast-extended card radious-30\">\n      <div className=\"carousel-heading\">\n        <div className=\"carousel-heading-section\">\n          <h5 className=\"color--purple\">Forecast extended</h5>\n        </div>\n        <div className=\"carousel-heading-buttons\">\n          <button data-action=\"slideLeft\" id=\"previous\" className=\"radious-50\">\n            <i className=\"fa fa-long-arrow-left\"></i>\n          </button>\n          <button data-action=\"slideRight\" id=\"next\" className=\"radious-50\">\n            <i className=\"fa fa-long-arrow-right\"></i>\n          </button>\n        </div>\n      </div>\n      <div className=\"carousel-slider\">{showForecastExtended()}</div>\n    </article>\n  );\n};\n\nForecastExtendedComponent.propTypes = {\n  forecastExtended: PropTypes.array.isRequired,\n};\n\nexport default ForecastExtendedComponent;\n","import React, { useEffect, useState } from \"react\";\nimport \"../../styles/global.scss\";\n\nimport HeaderComponent from \"../../components/header\";\nimport FavoritePlacesComponent from \"../../components/headquarters\";\nimport CitiesComponent from \"../../components/cities\";\nimport HeadquarterSuggestedComponent from \"../../components/headquarter-suggested\";\nimport NavigationComponent from '../../components/nagivation';\n\nimport getMainHeadquarter from \"../../services/getMainHeadquarter\";\nimport getFavoritePlaces from \"../../services/getFavoritePlaces\";\nimport getPlaceToVisit from \"../../services/getPlacesToVisit\";\nimport getHeadquarterSuggested from \"../../services/getHeadquarterSuggested\";\nimport ForecastExtendedComponent from \"../../components/forecast-extended\";\n\nimport \"./style.scss\";\n\nconst DashboardContainer = () => {\n  const [headquarters, setHeadquarters] = useState(null),\n    [forecastExtended, setForecastExtended] = useState(null),\n    [cities, setCities] = useState(null);\n\n  useEffect(() => {\n    async function getAllHeadquartes() {\n      try {\n        const response = await fetch(\n          `https://run.mocky.io/v3/818d0158-727b-461e-9f76-06734ed7e582`\n        );\n        const data = await response.json();\n        setHeadquarters(data.places);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    async function getForecastExtended() {\n      try {\n        const response = await fetch(\n          `https://run.mocky.io/v3/73c29128-d158-40db-aeae-ea78a0d762b7`\n        );\n        const data = await response.json();\n        setForecastExtended(data.list);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    async function getAllCities() {\n      try {\n        const response = await fetch(\n          `https://run.mocky.io/v3/f8926877-849a-416f-8226-9fd9d9fc5e07`\n        );\n        const data = await response.json();\n        setCities(data.result);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    getAllHeadquartes();\n    getForecastExtended();\n    getAllCities();\n  }, []);\n\n  const showHeaderComponent = () => {\n    const mainHeadquarter = getMainHeadquarter(headquarters);\n\n    return <HeaderComponent headquarter={mainHeadquarter} />;\n  };\n\n  const showFavoritePlaces = () => {\n    const favoriteHeadquarter = getFavoritePlaces(headquarters);\n\n    return <FavoritePlacesComponent headquarters={favoriteHeadquarter} />;\n  };\n\n  const showVisitPlaces = () => {\n    const citiesFiltered = getPlaceToVisit(cities);\n\n    return <CitiesComponent cities={citiesFiltered} />;\n  };\n\n  const showHeadquarterSuggested = () => {\n    const headquarterSuggested = getHeadquarterSuggested(headquarters);\n\n    return <HeadquarterSuggestedComponent headquarter={headquarterSuggested} />;\n  };\n\n  const showForecastExtended = () => {\n    return <ForecastExtendedComponent forecastExtended={forecastExtended} />;\n  };\n\n  return (\n    <>\n    <NavigationComponent />\n    <div className=\"container\">\n      <div className=\"dashboard\">\n        <main>\n          <>{headquarters ? showHeaderComponent() : null}</>\n          <>{forecastExtended ? showForecastExtended() : null}</>\n          <>{headquarters ? showFavoritePlaces() : null}</>\n        </main>\n        <aside>\n          <>{cities ? showHeadquarterSuggested() : null}</>\n          <>{cities ? showVisitPlaces() : null}</>\n        </aside>\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default DashboardContainer;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport DashboardContainer from '../containers/dashboard';\n\nconst RouterApp = () => {\n    return (\n        <Router>\n            <DashboardContainer />\n        </Router>\n    );\n};\n\nexport default RouterApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RouterApp from './router';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}